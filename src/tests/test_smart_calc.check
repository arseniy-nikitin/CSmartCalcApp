#include "../smart_calc.h"

#define OK 0
#define FAILURE 2

/*
  STD CALC TESTS
*/

#test calc_label_eq_1
  char *input = "5+10+97+0*log(12)";
  double res = 0;
  calc_label_eq(&res, input, 0);
  ck_assert_ldouble_eq(res, 112.000000);

#test calc_label_eq_2
  char *input = "2^(2^3)";
  double res = 0;
  calc_label_eq(&res, input, 0);
  ck_assert_ldouble_eq(res, 256.000000);

#test calc_label_eq_3
  char *input = "acos(1)+asin(-1)/(atan(2)*sqrt(9))";
  double res = 0;
  calc_label_eq(&res, input, 0);
  int test_res = fabsl(res - (-0.472925423)) < 1e-6 ? OK : FAILURE;
  ck_assert_ldouble_eq(test_res, OK);

#test calc_label_eq_4
  char *input = "cos(3-1)/sin(5)*tan(1)^1";
  double res = 0;
  calc_label_eq(&res, input, 0);
  int test_res = fabsl(res - (0.67587224033)) < 1e-6 ? OK : FAILURE;
  ck_assert_ldouble_eq(test_res, OK);

#test calc_label_eq_5
  char *input = "2%2-(-1)";
  double res = 0;
  calc_label_eq(&res, input, 0);
  ck_assert_ldouble_eq(res, 1.000000);

#test calc_label_eq_6
  char *input =
      "15/(7-(1+1))*3-(2+(1+1))*15/(7-(200+1))*3-(2+(1+1))*(15/"
      "(7-(1+1))*3-(2+(1+1))+15/(7-(1+1))*3-(2+(1+1)))";
  double res = 0;
  calc_label_eq(&res, input, 0);
  int test_res = fabsl(res - (-30.0722)) < 1e-4 ? OK : FAILURE;
  ck_assert_ldouble_eq(test_res, OK);

// Dublicate
#test calc_label_eq_7
  char *input = "sqrt(2)+sin(3.14/4)*3-ln(2.718281)/cos(3.14/3)";
  double res = 0;
  calc_label_eq(&res, input, 0);
  int test_res = fabsl(res - (1.536526)) < 1e-6 ? OK : FAILURE;
  ck_assert_ldouble_eq(test_res, OK);

#test calc_label_eq_8
  char *input = "100000+10000/0.1";
  double res = 0;
  calc_label_eq(&res, input, 0);
  ck_assert_ldouble_eq(res, 200000.000000);

#test calc_label_eq_9
  char *input = "ln(10)-(-log(2))";
  double res = 0;
  calc_label_eq(&res, input, 0);
  int test_res = fabsl(res - (2.60361508866)) < 1e-4 ? OK : FAILURE;
  ck_assert_ldouble_eq(test_res, OK);

#test calc_label_eq_10
  char *input = "(acos(1) + sqrt(49)) / tan(3.14/4) - asin(sin(3.14/6))";
  double res = 0;
  calc_label_eq(&res, input, 0);
  int test_res = fabsl(res - (6.482243)) < 1e-6 ? OK : FAILURE;
  ck_assert_ldouble_eq(test_res, OK);

#test calc_label_eq_11
  char *input = "pussy_test";
  double res = 0;
  int res_test = calc_label_eq(&res, input, 0);
  ck_assert_int_eq(res_test, FAILURE);

#test calc_label_eq_12
  char *input = "(cos(()))";
  double res = 0;
  int res_test = calc_label_eq(&res, input, 0);
  ck_assert_int_eq(res_test, FAILURE);

#test calc_label_eq_13
  char *input = "*";
  double res = 0;
  int res_test = calc_label_eq(&res, input, 0);
  ck_assert_int_eq(res_test, FAILURE);

#test calc_label_eq_14
  char *input = "1+";
  double res = 0;
  int res_test = calc_label_eq(&res, input, 0);
  ck_assert_int_eq(res_test, FAILURE);

/*
  STD CALC X TESTS
*/

#test calc_label_eq_x_1
  char *input = "x*x*x";
  double res = 0;
  calc_label_eq(&res, input, -2);
  ck_assert_ldouble_eq(res, -8.000000);

#test calc_label_eq_x_2
  char *input = "cos(3-1)/sin(5)*tan(1)^1*x";
  double res = 0;
  calc_label_eq(&res, input, -2);
  int test_res = fabsl(res - (-1.351744)) < 1e-4 ? OK : FAILURE;
  ck_assert_int_eq(test_res, OK);

#test calc_label_eq_x_3
  char *input = "acos(0)+sqrt(x*(-4))*log(100)";
  double res = 0;
  calc_label_eq(&res, input, -2);
  int test_res = fabsl(res - (7.227651)) < 1e-4 ? OK : FAILURE;
  ck_assert_int_eq(test_res, OK);

#test calc_label_eq_x_4
  char *input = "ln(10)-(-log(2*x*x))";
  double res = 0;
  calc_label_eq(&res, input, -2);
  int test_res = fabsl(res - (3.205675)) < 1e-4 ? OK : FAILURE;
  ck_assert_int_eq(test_res, OK);

#test calc_label_eq_x_5
  char *input = "ln(10*x*x)-x*(-log(2))";
  double res = 0;
  calc_label_eq(&res, input, -2);
  int test_res = fabsl(res - (3.086819)) < 1e-4 ? OK : FAILURE;
  ck_assert_int_eq(test_res, OK);

#test calc_label_eq_x_6
  char *input = "100000+10000/0.1*x";
  double res = 0;
  calc_label_eq(&res, input, -2);
  ck_assert_ldouble_eq(res, -100000.000000);

#test calc_label_eq_x_7
  char *input = "12031997+05101997";
  double res = 0;
  calc_label_eq(&res, input, -2);
  ck_assert_ldouble_eq(res, 17133994.000000);

#test calc_label_eq_x_8
  char *input = "x+5";
  double res = 0;
  calc_label_eq(&res, input, -2);
  int test_res = fabsl(res - (3)) < 1e-4 ? OK : FAILURE;
  ck_assert_int_eq(test_res, OK);

#test calc_label_eq_x_9
  char *input = "1000000-x";
  double res = 0;
  calc_label_eq(&res, input, -2);
  ck_assert_ldouble_eq(res, 1000002.000000);

#test calc_label_eq_x_10
  char *input = "sin(130)+x-x*x*(+x)";
  double res = 0;
  calc_label_eq(&res, input, -2);
  int test_res = fabsl(res - (5.069894)) < 1e-4 ? OK : FAILURE;
  ck_assert_int_eq(test_res, OK);

#test calc_label_eq_x_11
  char *input = "sin)";
  double res = 0;
  int test_res = calc_label_eq(&res, input, -2);
  ck_assert_int_eq(test_res, FAILURE);

#test calc_label_eq_x_12
  char *input = "all_gonna_be_OK!";
  double res = 0;
  int test_res = calc_label_eq(&res, input, -2);
  ck_assert_int_eq(test_res, FAILURE);

/*
  CREDIT CALC TESTS
*/

#test credit_calc_1
  Stack* res = create_stack(4);

  double total_credit = 1000000.0;
  double period = 84.0;
  double percentage = 7.5;
  int type = ANNUITY;

  double first_month_pay = 15338.28;
  double last_month_pay = 15338.28;
  double overpayment = 288415.52;
  double total_payment = 1288415.52;

  if (res != NULL) {
    credit_calc(res, total_credit, period, percentage, type);
    ck_assert_int_eq(fabsl(first_month_pay - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(last_month_pay - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(overpayment - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(total_payment - (pop(res))) < 1 ? OK : FAILURE, OK);
  }

  destroy_stack(res);

#test credit_calc_2
  Stack* res = create_stack(4);

  double total_credit = 1000000.0;
  double period = 84.0;
  double percentage = 7.5;
  int type = DIFFERENTIATED;

  double first_month_pay = 18154.76;
  double last_month_pay = 11979.17;
  double overpayment = 265625.0;
  double total_payment = 1265625.0;

  if (res != NULL) {
    credit_calc(res, total_credit, period, percentage, type);
    ck_assert_int_eq(fabsl(first_month_pay - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(last_month_pay - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(overpayment - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(total_payment - (pop(res))) < 1 ? OK : FAILURE, OK);
  }

  destroy_stack(res);

#test credit_calc_3
  Stack* res = NULL;
  int test_res = credit_calc(res, 0.0, 0.0, 0.0, 0);
  ck_assert_int_eq(test_res, FAILURE);

/*
  DEPOSIT CALC TESTS
*/

#test deposit_calc_1
  Stack* res = create_stack(3);

  double total_deposit = 1000000.0;
  double period = 48.0;
  double percentage = 12.5;
  double tax_rate = 13.0;
  double replenishments = 5000.0;
  double withdrawals = 15000.0;
  char* replenishments_rate = "ONE/M";
  char* withdrawals_rate = "ONE/Y";
  char* pcf_rate = "ONE/D";
  int profit_cap = PAYMENT;

  double total_profit = 548436.73;
  double total_tax = 54396.90;
  double total_balance = 1743436.73 ;

  if (res != NULL) {
    deposit_calc(res, total_deposit, period, percentage, tax_rate, replenishments, 
                 withdrawals, replenishments_rate, withdrawals_rate, pcf_rate, profit_cap);
    ck_assert_int_eq(fabsl(total_profit - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(total_tax - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(total_balance - (pop(res))) < 1 ? OK : FAILURE, OK);
  }

  destroy_stack(res);

#test deposit_calc_2
  Stack* res = create_stack(3);

  double total_deposit = 1000000.0;
  double period = 48.0;
  double percentage = 12.5;
  double tax_rate = 13.0;
  double replenishments = 5000.0;
  double withdrawals = 15000.0;
  char* replenishments_rate = "ONE/M";
  char* withdrawals_rate = "ONE/Y";
  char* pcf_rate = "ONE/D";
  int profit_cap = CAPITALIZATION;

  double total_profit = 706375.79;
  double total_tax = 74928.23;
  double total_balance = 1901375.0 ;

  if (res != NULL) {
    deposit_calc(res, total_deposit, period, percentage, tax_rate, replenishments, 
                 withdrawals, replenishments_rate, withdrawals_rate, pcf_rate, profit_cap);
    ck_assert_int_eq(fabsl(total_profit - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(total_tax - (pop(res))) < 1 ? OK : FAILURE, OK);
    ck_assert_int_eq(fabsl(total_balance - (pop(res))) < 1 ? OK : FAILURE, OK);
  }

  destroy_stack(res);

#test deposit_calc_3
  Stack* res = NULL;
  int test_res = deposit_calc(res, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, "\0", "\0", "\0", 0);
  ck_assert_int_eq(test_res, FAILURE);
